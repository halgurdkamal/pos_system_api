// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pos_system_api.Infrastructure.Data;

#nullable disable

namespace pos_system_api.src.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251023222506_AddShopReceiptAndHardwareConfig")]
    partial class AddShopReceiptAndHardwareConfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("pos_system_api.Core.Domain.Drugs.Entities.Drug", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BarcodeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DrugId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<List<string>>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("InteractionNotes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OriginCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<List<string>>("RelatedDrugs")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("SideEffects")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("DrugId")
                        .IsUnique();

                    b.ToTable("Drugs", (string)null);
                });

            modelBuilder.Entity("pos_system_api.Core.Domain.Inventory.Entities.ShopInventory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Batches")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DrugId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastRestockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReorderPoint")
                        .HasColumnType("integer");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StorageLocation")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("TotalStock")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("IsAvailable");

                    b.HasIndex("LastRestockDate");

                    b.HasIndex("ShopId");

                    b.HasIndex("TotalStock");

                    b.HasIndex("ShopId", "DrugId")
                        .IsUnique();

                    b.ToTable("ShopInventory", (string)null);
                });

            modelBuilder.Entity("pos_system_api.Core.Domain.Shops.Entities.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<List<string>>("AcceptedInsuranceProviders")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("AllowsControlledSubstances")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutoReorderEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("BrandColorPrimary")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("BrandColorSecondary")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("DefaultTaxRate")
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("LowStockAlertThreshold")
                        .HasColumnType("integer");

                    b.Property<Dictionary<string, string>>("OperatingHours")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PharmacyRegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RequiresPrescriptionVerification")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("ShopImageUrls")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaxId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("VatRegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("RegistrationDate");

                    b.HasIndex("ShopName");

                    b.HasIndex("Status");

                    b.ToTable("Shops", (string)null);
                });

            modelBuilder.Entity("pos_system_api.Core.Domain.Suppliers.Entities.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DeliveryLeadTime")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("MinimumOrderValue")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("PaymentTerms")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SupplierType")
                        .HasColumnType("integer");

                    b.Property<string>("TaxId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Website")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("IsActive");

                    b.HasIndex("SupplierName");

                    b.HasIndex("SupplierType");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("pos_system_api.Core.Domain.Drugs.Entities.Drug", b =>
                {
                    b.OwnsOne("pos_system_api.Core.Domain.Drugs.ValueObjects.BasePricing", "BasePricing", b1 =>
                        {
                            b1.Property<string>("DrugId")
                                .HasColumnType("text");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("BasePricing_Currency");

                            b1.Property<DateTime?>("LastPriceUpdate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("BasePricing_LastPriceUpdate");

                            b1.Property<decimal>("SuggestedRetailPrice")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("BasePricing_SuggestedRetailPrice");

                            b1.Property<decimal>("SuggestedTaxRate")
                                .HasColumnType("numeric(5,2)")
                                .HasColumnName("BasePricing_SuggestedTaxRate");

                            b1.HasKey("DrugId");

                            b1.ToTable("Drugs");

                            b1.WithOwner()
                                .HasForeignKey("DrugId");
                        });

                    b.OwnsOne("pos_system_api.Core.Domain.Drugs.ValueObjects.Formulation", "Formulation", b1 =>
                        {
                            b1.Property<string>("DrugId")
                                .HasColumnType("text");

                            b1.Property<string>("Form")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("FormulationForm");

                            b1.Property<string>("RouteOfAdministration")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("RouteOfAdministration");

                            b1.Property<string>("Strength")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("FormulationStrength");

                            b1.HasKey("DrugId");

                            b1.ToTable("Drugs");

                            b1.WithOwner()
                                .HasForeignKey("DrugId");
                        });

                    b.OwnsOne("pos_system_api.Core.Domain.Drugs.ValueObjects.Regulatory", "Regulatory", b1 =>
                        {
                            b1.Property<string>("DrugId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("ApprovalDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ApprovalDate");

                            b1.Property<string>("ControlSchedule")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("ControlSchedule");

                            b1.Property<string>("DrugAuthorityNumber")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("DrugAuthorityNumber");

                            b1.Property<bool>("IsHighRisk")
                                .HasColumnType("boolean")
                                .HasColumnName("IsHighRisk");

                            b1.Property<bool>("IsPrescriptionRequired")
                                .HasColumnType("boolean")
                                .HasColumnName("IsPrescriptionRequired");

                            b1.HasKey("DrugId");

                            b1.ToTable("Drugs");

                            b1.WithOwner()
                                .HasForeignKey("DrugId");
                        });

                    b.Navigation("BasePricing")
                        .IsRequired();

                    b.Navigation("Formulation")
                        .IsRequired();

                    b.Navigation("Regulatory")
                        .IsRequired();
                });

            modelBuilder.Entity("pos_system_api.Core.Domain.Inventory.Entities.ShopInventory", b =>
                {
                    b.HasOne("pos_system_api.Core.Domain.Drugs.Entities.Drug", null)
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("pos_system_api.Core.Domain.Shops.Entities.Shop", null)
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("pos_system_api.Core.Domain.Inventory.ValueObjects.ShopPricing", "ShopPricing", b1 =>
                        {
                            b1.Property<string>("ShopInventoryId")
                                .HasColumnType("character varying(50)");

                            b1.Property<decimal>("CostPrice")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("Pricing_CostPrice");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("Pricing_Currency");

                            b1.Property<decimal>("Discount")
                                .HasColumnType("numeric(5,2)")
                                .HasColumnName("Pricing_Discount");

                            b1.Property<DateTime>("LastPriceUpdate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("Pricing_LastPriceUpdate");

                            b1.Property<decimal>("SellingPrice")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("Pricing_SellingPrice");

                            b1.Property<decimal>("TaxRate")
                                .HasColumnType("numeric(5,2)")
                                .HasColumnName("Pricing_TaxRate");

                            b1.HasKey("ShopInventoryId");

                            b1.ToTable("ShopInventory");

                            b1.WithOwner()
                                .HasForeignKey("ShopInventoryId");
                        });

                    b.Navigation("ShopPricing")
                        .IsRequired();
                });

            modelBuilder.Entity("pos_system_api.Core.Domain.Shops.Entities.Shop", b =>
                {
                    b.OwnsOne("pos_system_api.Core.Domain.Common.ValueObjects.Contact", "Contact", b1 =>
                        {
                            b1.Property<string>("ShopId")
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Contact_Email");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Contact_Phone");

                            b1.Property<string>("Website")
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Contact_Website");

                            b1.HasKey("ShopId");

                            b1.ToTable("Shops");

                            b1.WithOwner()
                                .HasForeignKey("ShopId");
                        });

                    b.OwnsOne("pos_system_api.Core.Domain.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<string>("ShopId")
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Address_City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Address_Country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Address_State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Address_Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Address_ZipCode");

                            b1.HasKey("ShopId");

                            b1.ToTable("Shops");

                            b1.WithOwner()
                                .HasForeignKey("ShopId");
                        });

                    b.OwnsOne("pos_system_api.Core.Domain.Shops.ValueObjects.HardwareConfiguration", "HardwareConfig", b1 =>
                        {
                            b1.Property<string>("ShopId")
                                .HasColumnType("character varying(50)");

                            b1.Property<bool>("AutoSubmitOnScan")
                                .HasColumnType("boolean")
                                .HasColumnName("Hardware_AutoSubmitOnScan");

                            b1.Property<int>("BarcodeLabelSize")
                                .HasColumnType("integer")
                                .HasColumnName("Hardware_BarcodeLabelSize");

                            b1.Property<string>("BarcodePrinterConnectionType")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Hardware_BarcodePrinterConnection");

                            b1.Property<string>("BarcodePrinterIpAddress")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Hardware_BarcodePrinterIp");

                            b1.Property<string>("BarcodePrinterName")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Hardware_BarcodePrinterName");

                            b1.Property<string>("BarcodeScannerConnectionType")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Hardware_BarcodeScannerConnection");

                            b1.Property<string>("BarcodeScannerModel")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Hardware_BarcodeScannerModel");

                            b1.Property<bool>("CashDrawerEnabled")
                                .HasColumnType("boolean")
                                .HasColumnName("Hardware_CashDrawerEnabled");

                            b1.Property<string>("CashDrawerModel")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Hardware_CashDrawerModel");

                            b1.Property<string>("CashDrawerOpenCommand")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Hardware_CashDrawerOpenCommand");

                            b1.Property<bool>("CustomerDisplayEnabled")
                                .HasColumnType("boolean")
                                .HasColumnName("Hardware_CustomerDisplayEnabled");

                            b1.Property<string>("CustomerDisplayType")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Hardware_CustomerDisplayType");

                            b1.Property<bool>("IntegratedPayments")
                                .HasColumnType("boolean")
                                .HasColumnName("Hardware_IntegratedPayments");

                            b1.Property<string>("PaymentTerminalConnectionType")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Hardware_PaymentTerminalConnection");

                            b1.Property<string>("PaymentTerminalIpAddress")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Hardware_PaymentTerminalIp");

                            b1.Property<string>("PaymentTerminalModel")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Hardware_PaymentTerminalModel");

                            b1.Property<string>("PosTerminalId")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Hardware_PosTerminalId");

                            b1.Property<string>("PosTerminalName")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Hardware_PosTerminalName");

                            b1.Property<string>("ReceiptPrinterConnectionType")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Hardware_ReceiptPrinterConnection");

                            b1.Property<string>("ReceiptPrinterIpAddress")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Hardware_ReceiptPrinterIp");

                            b1.Property<string>("ReceiptPrinterName")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Hardware_ReceiptPrinterName");

                            b1.Property<int?>("ReceiptPrinterPort")
                                .HasColumnType("integer")
                                .HasColumnName("Hardware_ReceiptPrinterPort");

                            b1.HasKey("ShopId");

                            b1.ToTable("Shops");

                            b1.WithOwner()
                                .HasForeignKey("ShopId");
                        });

                    b.OwnsOne("pos_system_api.Core.Domain.Shops.ValueObjects.ReceiptConfiguration", "ReceiptConfig", b1 =>
                        {
                            b1.Property<string>("ShopId")
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("ControlledSubstanceWarning")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("Receipt_ControlledSubstanceWarning");

                            b1.Property<string>("PharmacistName")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Receipt_PharmacistName");

                            b1.Property<string>("PharmacyWarningText")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("Receipt_PharmacyWarning");

                            b1.Property<bool>("PrintDuplicateReceipt")
                                .HasColumnType("boolean")
                                .HasColumnName("Receipt_PrintDuplicate");

                            b1.Property<string>("ReceiptFooterText")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("Receipt_FooterText");

                            b1.Property<string>("ReceiptHeaderText")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("Receipt_HeaderText");

                            b1.Property<string>("ReceiptLanguage")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("Receipt_Language");

                            b1.Property<string>("ReceiptShopName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Receipt_ShopName");

                            b1.Property<int>("ReceiptWidth")
                                .HasColumnType("integer")
                                .HasColumnName("Receipt_Width");

                            b1.Property<string>("ReturnPolicyText")
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("Receipt_ReturnPolicy");

                            b1.Property<bool>("ShowBarcode")
                                .HasColumnType("boolean")
                                .HasColumnName("Receipt_ShowBarcode");

                            b1.Property<bool>("ShowLogoOnReceipt")
                                .HasColumnType("boolean")
                                .HasColumnName("Receipt_ShowLogo");

                            b1.Property<bool>("ShowPharmacyLicense")
                                .HasColumnType("boolean")
                                .HasColumnName("Receipt_ShowPharmacyLicense");

                            b1.Property<bool>("ShowQrCode")
                                .HasColumnType("boolean")
                                .HasColumnName("Receipt_ShowQrCode");

                            b1.Property<bool>("ShowTaxBreakdown")
                                .HasColumnType("boolean")
                                .HasColumnName("Receipt_ShowTaxBreakdown");

                            b1.Property<bool>("ShowVatNumber")
                                .HasColumnType("boolean")
                                .HasColumnName("Receipt_ShowVatNumber");

                            b1.HasKey("ShopId");

                            b1.ToTable("Shops");

                            b1.WithOwner()
                                .HasForeignKey("ShopId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("HardwareConfig")
                        .IsRequired();

                    b.Navigation("ReceiptConfig")
                        .IsRequired();
                });

            modelBuilder.Entity("pos_system_api.Core.Domain.Suppliers.Entities.Supplier", b =>
                {
                    b.OwnsOne("pos_system_api.Core.Domain.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<string>("SupplierId")
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Address_City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Address_Country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Address_State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("Address_Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Address_ZipCode");

                            b1.HasKey("SupplierId");

                            b1.ToTable("Suppliers");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
