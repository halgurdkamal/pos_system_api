// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pos_system_api.Infrastructure.Data;

#nullable disable

namespace pos_system_api.src.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251023213936_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("pos_system_api.Core.Domain.Drugs.Entities.Drug", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BarcodeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DrugId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<List<string>>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("InteractionNotes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OriginCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<List<string>>("RelatedDrugs")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("SideEffects")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("DrugId")
                        .IsUnique();

                    b.ToTable("Drugs", (string)null);
                });

            modelBuilder.Entity("pos_system_api.Core.Domain.Drugs.Entities.Drug", b =>
                {
                    b.OwnsOne("pos_system_api.Core.Domain.Drugs.ValueObjects.Formulation", "Formulation", b1 =>
                        {
                            b1.Property<string>("DrugId")
                                .HasColumnType("text");

                            b1.Property<string>("Form")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("FormulationForm");

                            b1.Property<string>("RouteOfAdministration")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("RouteOfAdministration");

                            b1.Property<string>("Strength")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("FormulationStrength");

                            b1.HasKey("DrugId");

                            b1.ToTable("Drugs");

                            b1.WithOwner()
                                .HasForeignKey("DrugId");
                        });

                    b.OwnsOne("pos_system_api.Core.Domain.Drugs.ValueObjects.Inventory", "Inventory", b1 =>
                        {
                            b1.Property<string>("DrugId")
                                .HasColumnType("text");

                            b1.Property<int>("ReorderPoint")
                                .HasColumnType("integer")
                                .HasColumnName("ReorderPoint");

                            b1.Property<string>("StorageLocation")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("StorageLocation");

                            b1.Property<int>("TotalStock")
                                .HasColumnType("integer")
                                .HasColumnName("TotalStock");

                            b1.HasKey("DrugId");

                            b1.ToTable("Drugs");

                            b1.WithOwner()
                                .HasForeignKey("DrugId");

                            b1.OwnsMany("pos_system_api.Core.Domain.Drugs.ValueObjects.Batch", "Batches", b2 =>
                                {
                                    b2.Property<string>("InventoryDrugId")
                                        .HasColumnType("text");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("BatchNumber")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.Property<DateTime>("ExpiryDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<decimal>("PurchasePrice")
                                        .HasColumnType("numeric(18,2)");

                                    b2.Property<int>("QuantityOnHand")
                                        .HasColumnType("integer");

                                    b2.Property<DateTime>("ReceivedDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<decimal>("SellingPrice")
                                        .HasColumnType("numeric(18,2)");

                                    b2.HasKey("InventoryDrugId", "Id");

                                    b2.ToTable("DrugBatches", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("InventoryDrugId");
                                });

                            b1.Navigation("Batches");
                        });

                    b.OwnsOne("pos_system_api.Core.Domain.Drugs.ValueObjects.Pricing", "Pricing", b1 =>
                        {
                            b1.Property<string>("DrugId")
                                .HasColumnType("text");

                            b1.Property<decimal>("CostPrice")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("CostPrice");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("Currency");

                            b1.Property<decimal>("Discount")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("Discount");

                            b1.Property<decimal>("SellingPrice")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("SellingPrice");

                            b1.Property<decimal>("TaxRate")
                                .HasColumnType("numeric(5,2)")
                                .HasColumnName("TaxRate");

                            b1.HasKey("DrugId");

                            b1.ToTable("Drugs");

                            b1.WithOwner()
                                .HasForeignKey("DrugId");
                        });

                    b.OwnsOne("pos_system_api.Core.Domain.Drugs.ValueObjects.Regulatory", "Regulatory", b1 =>
                        {
                            b1.Property<string>("DrugId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("ApprovalDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ApprovalDate");

                            b1.Property<string>("ControlSchedule")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("ControlSchedule");

                            b1.Property<string>("DrugAuthorityNumber")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("DrugAuthorityNumber");

                            b1.Property<bool>("IsHighRisk")
                                .HasColumnType("boolean")
                                .HasColumnName("IsHighRisk");

                            b1.Property<bool>("IsPrescriptionRequired")
                                .HasColumnType("boolean")
                                .HasColumnName("IsPrescriptionRequired");

                            b1.HasKey("DrugId");

                            b1.ToTable("Drugs");

                            b1.WithOwner()
                                .HasForeignKey("DrugId");
                        });

                    b.OwnsOne("pos_system_api.Core.Domain.Drugs.ValueObjects.SupplierInfo", "SupplierInfo", b1 =>
                        {
                            b1.Property<string>("DrugId")
                                .HasColumnType("text");

                            b1.Property<string>("ContactNumber")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("SupplierContactNumber");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("SupplierEmail");

                            b1.Property<string>("SupplierId")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("SupplierId");

                            b1.Property<string>("SupplierName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("SupplierName");

                            b1.HasKey("DrugId");

                            b1.ToTable("Drugs");

                            b1.WithOwner()
                                .HasForeignKey("DrugId");
                        });

                    b.Navigation("Formulation")
                        .IsRequired();

                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("Pricing")
                        .IsRequired();

                    b.Navigation("Regulatory")
                        .IsRequired();

                    b.Navigation("SupplierInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
